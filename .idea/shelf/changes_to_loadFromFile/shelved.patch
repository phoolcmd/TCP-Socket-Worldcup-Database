Index: src/edu/ucdenver/tournament/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ucdenver.tournament;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDate;\r\n\r\npublic class Test {\r\n\r\n    public static void  main(String[] args) throws IOException, ClassNotFoundException {\r\n        Tournament tournament = new Tournament(\"World-cup Qatar\", LocalDate.now(),LocalDate.now().plusMonths(1));\r\n\r\n        tournament.addCountry(\"USA\");\r\n        tournament.addCountry(\"Spain\");\r\n        tournament.addCountry(\"Japan\");\r\n        tournament.addCountry(\"Mexico\");\r\n    //    tournament.addCountry(\"Mexico\");\r\n     //   tournament.loadFromFile(\"t.txt\");\r\n\r\n\r\n        // tournament.saveToFile(\"t.txt\");\r\n\r\n        tournament.addTeam(\"Sword\",\"Japan\");\r\n        tournament.addTeam(\"Jazz\",\"USA\");\r\n        tournament.addTeam(\"Warriors\",\"Spain\");\r\n        tournament.addTeam(\"Captain\",\"Mexico\");\r\n\r\n\r\n\r\n\r\n        tournament.addPlayer(\"Jazz\",\"bob\",26,55.0,145.45);\r\n        tournament.addPlayer(\"Jazz\",\"dave\",27,60,154);\r\n        tournament.addPlayer(\"Warriors\",\"joe\",29,70,200);\r\n        tournament.addPlayer(\"Captain\",\"jim\",31,60.1,156.45);\r\n        tournament.addPlayer(\"Sword\",\"david\",32,60.5,130.5);\r\n\r\n        tournament.addMatch(LocalDate.now(),\"Jazz\",\"Warriors\");\r\n        tournament.addMatch(LocalDate.of(2022,12,20),\"Jazz\",\"Sword\");\r\n        //tournament.getTeamList().get(1).addPlayer();\r\n        System.out.println(tournament.getTeamList().get(2).getSquad());\r\n        tournament.addPlayerToMatch(LocalDate.now(),\"Jazz\",\"bob\");\r\n        tournament.addPlayerToMatch(LocalDate.now(),\"Jazz\",\"dave\");\r\n        tournament.addPlayerToMatch(LocalDate.now(),\"Warriors\",\"joe\");\r\n        System.out.println(tournament.getMatchLineUps(LocalDate.now()));\r\n        try {\r\n            tournament.addReferee(\"jim\",\"Japan\");\r\n            tournament.addRefereeToMatch(LocalDate.now(),\"jim\");\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n//\r\n//        tournament.getTeamList().get(0).addPlayer(\"bob\",26,55.0,145.45);\r\n//        tournament.getTeamList().get(0).addPlayer(\"dave\",27,60,154);\r\n//        System.out.println(tournament.getTeamList().get(0).getSquad());\r\n//        System.out.println(tournament.getMatchLineUps(LocalDate.now()));\r\n\r\n\r\n\r\n\r\n\r\n\r\n//        tournament.addTeam(\"Alpha\", \"United States of America\");\r\n//        tournament.addTeam(\"Bravo\", \"Brazil\");\r\n//        tournament.addPlayer(\"Alpha\", \"Noah Wood\", 24, 80, 170);\r\n//        tournament.addPlayer(\"Bravo\", \"Rick James\", 99, 99, 99);\r\n//        tournament.addMatch(LocalDate.now(), \"Alpha\", \"Bravo\");\r\n\r\n//        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Tournament <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n//        System.out.print(tournament);\r\n//        System.out.println();\r\n//\r\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Countries <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n        for(Country c : tournament.getCountryList()){\r\n            System.out.println(c);\r\n        }\r\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Teams <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n\r\n        for (Team t: tournament.getTeamList()) {\r\n            System.out.println(t);\r\n        }\r\n\r\n//\r\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Players <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n        for (Player p : tournament.getPlayersInTournament()) {\r\n            System.out.println(p);\r\n        }\r\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Referees <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n        for (Referee r : tournament.getRefereeList()) {\r\n            System.out.println(r);\r\n        }\r\n        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> Matches <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n        for (Match m : tournament.getUpcomingMatches()) {\r\n            System.out.println(m);\r\n        }\r\n//        for (Team t : tournament.getTeamList()) {\r\n//            System.out.println(t);\r\n//            tournament.getMatchesFor(t.getName());\r\n//        }\r\n//\r\n//        System.out.println(\">>>>>>>>>>>>>>>>>>>>>> <<<<<<<<<<<<<<<<<<<<<<<<<<\");\r\n\r\n tournament.saveToFile(\"t.txt\");\r\n        tournament.loadFromFile(\"t.txt\");\r\n\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/edu/ucdenver/tournament/Test.java b/src/edu/ucdenver/tournament/Test.java
--- a/src/edu/ucdenver/tournament/Test.java	(revision 44126d9c7203e8ddca4c3f019ff29ae9dc654ce9)
+++ b/src/edu/ucdenver/tournament/Test.java	(date 1668578421779)
@@ -29,8 +29,9 @@
         tournament.addPlayer("Jazz","bob",26,55.0,145.45);
         tournament.addPlayer("Jazz","dave",27,60,154);
         tournament.addPlayer("Warriors","joe",29,70,200);
-        tournament.addPlayer("Captain","jim",31,60.1,156.45);
+       // tournament.addPlayer("Captain","jim",31,60.1,156.45);
         tournament.addPlayer("Sword","david",32,60.5,130.5);
+        tournament.addPlayer("Sword","neeko",56,59,120);
 
         tournament.addMatch(LocalDate.now(),"Jazz","Warriors");
         tournament.addMatch(LocalDate.of(2022,12,20),"Jazz","Sword");
Index: src/edu/ucdenver/tournament/Match.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ucdenver.tournament;\r\n\r\nimport java.io.Serializable;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Match implements Serializable {\r\n    private final LocalDate dateTime;\r\n    private int scoreTeamA, scoreTeamB;\r\n    private Team teamA, teamB;\r\n    private LineUp teamALineUp, teamBLineUp;\r\n    private ArrayList<Referee> referees;\r\n\r\n\r\n    public Match(LocalDate dateTime, Team teamA, Team teamB) {\r\n        this.dateTime = dateTime;\r\n        this.referees = new ArrayList<>();\r\n\r\n\r\n        this.teamA = teamA;\r\n        this.teamB = teamB;\r\n    }\r\n\r\n    //Getters\r\n    public LocalDate getDateTime() {\r\n        return this.dateTime;\r\n    }\r\n\r\n    public int getScoreTeamA() {\r\n        return this.scoreTeamA;\r\n    }\r\n\r\n    public int getScoreTeamB() {\r\n        return this.scoreTeamB;\r\n    }\r\n\r\n    public Team getTeamA() {\r\n        return this.teamA;\r\n    }\r\n    public void setTeamALineUp(LineUp lineUp) {\r\n        this.teamALineUp = lineUp;\r\n    }\r\n    public void setTeamBLineUp (LineUp lineUp) {\r\n        this.teamBLineUp = lineUp;\r\n    }\r\n    public void setTeamA (Team teamA) {\r\n        this.teamA = teamA;\r\n    }\r\n    public void setTeamB (Team teamB) {\r\n        this.teamB = teamB;\r\n    }\r\n    public LineUp getTeamALineUp() {\r\n        return this.teamALineUp;\r\n    }\r\n    public LineUp getTeamBLineUp() {\r\n        return this.teamBLineUp;\r\n    }\r\n\r\n    public Team getTeamB() {\r\n        return this.teamB;\r\n    }\r\n\r\n    public List<Referee> getReferees() throws NullPointerException {\r\n        return referees;\r\n\r\n    }\r\n\r\n    //Setters\r\n    public void setMatchScore(int teamAScore, int teamBScore) throws IllegalArgumentException {\r\n        if (scoreTeamA < 0 || scoreTeamB < 0) {\r\n            throw new IllegalArgumentException(\"The score can not be less than 0\");\r\n        } else {\r\n            scoreTeamA = teamAScore;\r\n            scoreTeamB = teamBScore;\r\n        }\r\n    }\r\n\r\n    public boolean isUpcoming() {\r\n        if (dateTime.isAfter(LocalDate.now())) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n\r\n    public void addPlayer(Player player, Team team) throws IllegalArgumentException {\r\n        Player player1 = null;\r\n        Team team1 = null;\r\n\r\n        if (team.equals(getTeamA())) {\r\n            for (int i = 0; i < teamA.getSquad().size(); i++) {\r\n                if (teamA.getSquad().get(i).equals(player)) {\r\n                    teamALineUp.addPlayer(player);\r\n                    player1 = player;\r\n                    team1 = teamA;\r\n                }\r\n            }\r\n        }\r\n        else if (team.equals(getTeamB())) {\r\n            for (int i = 0; i < teamB.getSquad().size(); i++) {\r\n                if (teamB.getSquad().get(i).equals(player)) {\r\n                    teamBLineUp.addPlayer(player);\r\n                    player1 = player;\r\n                    team1 = teamB;\r\n                }\r\n            }\r\n        }\r\n        if (player1 == null) {throw new IllegalArgumentException(\"The player was not found to be added\");}\r\n        if (team1 == null) {throw new IllegalArgumentException(\"The team does not exist\");}\r\n    }\r\n    public void addReferee(Referee referee) throws IllegalArgumentException {\r\n        Referee referee1 = null;\r\n        if (referees.isEmpty()) {\r\n            referees.add(referee);\r\n            referee1 = referee;\r\n        } else {\r\n            for (int i = 0; i < referees.size(); i++) {\r\n                if (!referees.get(i).equals(referee)) {\r\n                    referees.add(referee);\r\n                    referee1 = referee;\r\n                }\r\n            }\r\n        }\r\n        if (referees.size() != 4) {\r\n            throw new IllegalArgumentException(\"There must be four referees for the match to take place\");\r\n        }\r\n        if (referee1 == null) {\r\n            throw new IllegalArgumentException(\"The referee already exists in the list\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(\"Match Date: %s|Referees %s Team A Score: %s| Team B Score: %s\", getDateTime(),getReferees(), getScoreTeamA(), getScoreTeamB());\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/edu/ucdenver/tournament/Match.java b/src/edu/ucdenver/tournament/Match.java
--- a/src/edu/ucdenver/tournament/Match.java	(revision 44126d9c7203e8ddca4c3f019ff29ae9dc654ce9)
+++ b/src/edu/ucdenver/tournament/Match.java	(date 1668578421787)
@@ -130,7 +130,7 @@
 
     @Override
     public String toString() {
-        return String.format("Match Date: %s|Referees %s Team A Score: %s| Team B Score: %s", getDateTime(),getReferees(), getScoreTeamA(), getScoreTeamB());
+        return String.format("Match Date: %s|Referees %s", getDateTime(),getReferees());
     }
 
 
Index: src/edu/ucdenver/tournament/Tournament.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ucdenver.tournament;\r\nimport java.io.*;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.NoSuchElementException;\r\nimport java.util.Objects;\r\n\r\n\r\npublic class Tournament implements Serializable {\r\n    private String name;\r\n\r\n    private final ArrayList<Country> countryList;\r\n    private ArrayList<Player> playerList;\r\n    private ArrayList<Team> teamList;\r\n    private ArrayList<Match> matchList;\r\n    private ArrayList<String> teamListString;\r\n    private ArrayList<Referee> refereeList;\r\n\r\n    private LocalDate startDate;\r\n    private LocalDate endDate;\r\n\r\n    public Tournament(String name, LocalDate startDate, LocalDate endDate)  {\r\n        this.name = name;\r\n        this.startDate = startDate;\r\n        this.endDate = endDate;\r\n\r\n\r\n        this.countryList = new ArrayList<>();\r\n        this.playerList = new ArrayList<>();\r\n        this.teamList = new ArrayList<>();\r\n        this.matchList = new ArrayList<>();\r\n        this.refereeList = new ArrayList<>();\r\n\r\n\r\n        this.teamListString = new ArrayList<>(); //used for the addMatch function\r\n\r\n\r\n    }\r\n    public List<Country> getCountryList() {\r\n       return countryList;\r\n\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public LocalDate getStartDate() {\r\n        return this.startDate;\r\n    }\r\n\r\n    public void setStartDate(LocalDate startDate) {\r\n        this.startDate = startDate;\r\n    }\r\n\r\n    public LocalDate getEndDate() {\r\n        return this.endDate;\r\n    }\r\n\r\n    public void setEndDate(LocalDate endDate) {\r\n        this.endDate = endDate;\r\n    }\r\n\r\n //TODO: implement loadFromFile\r\n    public void loadFromFile(String fileName) throws IllegalArgumentException, IOException,ClassNotFoundException {\r\n        BufferedReader br = new BufferedReader(new FileReader(fileName));\r\n        String tournamentNameString = br.readLine();\r\n        String[] t = null; // array that is used to set the name, startDate, endDate for the tournament\r\n        String startDateString = null; String endDateString = null;\r\n        LocalDate startDate = null; LocalDate endDate = null;\r\n        t = tournamentNameString.split(\"    \");\r\n        System.out.println(t[0]);\r\n        System.out.println(t[1]);\r\n        System.out.println(t[2]);\r\n        startDateString = t[1];\r\n        endDateString = t[2];\r\n        startDate = LocalDate.parse(startDateString);\r\n        endDate = LocalDate.parse(endDateString);\r\n        Tournament tournament = new Tournament(t[0],startDate,endDate);\r\n\r\n        // string used to count how many countries there are\r\n        String numOfCountries = br.readLine();\r\n        System.out.println(numOfCountries);\r\n        //System.out.println(br.readLine()); // debugging\r\n        // loop that gets all the country names and adds them back to tournament\r\n        for (int i = 0; i < Integer.parseInt(numOfCountries); i++) {\r\n            String country = br.readLine();\r\n            country = country.replace(\"Country: \",\"\");\r\n            country = country.replace(\"|\",\"\");\r\n          //  tournament.addCountry(country); //TODO: uncomment this\r\n            System.out.println(country);\r\n        }\r\n       // System.out.println(br.readLine());\r\n        String numberOfTeamsString = br.readLine();\r\n        ArrayList<String> teams = new ArrayList<>();\r\n        String[] players = null;\r\n        ArrayList<String> checkForPlayers = new ArrayList<>();\r\n        int numberOfTeams = Integer.parseInt(numberOfTeamsString);\r\n        for (int i = 0; i <numberOfTeams; i++) {\r\n           String line = br.readLine();\r\n           System.out.println(line);\r\n           String name, age,height,weight,teamName, countryName;;\r\n           line = line.replace(\"Country: \",\"\");\r\n           System.out.println(line);\r\n           teamName = line.substring(0,line.indexOf(\"|\"));\r\n           teamName = teamName.replace(\"|\",\"\");\r\n           System.out.println(teamName);\r\n           countryName = line.substring(line.indexOf(\"|\"),line.indexOf(\"||\"));\r\n           countryName = countryName.replace(\"|\",\"\");\r\n           System.out.println(countryName);\r\n           System.out.println(line);\r\n           players = (line.split(\"Player Name: \"));\r\n           System.out.println(players[1]);\r\n           //tournament.addTeam(teamName,countryName); //TODO:uncomment this line\r\n           //System.out.println(countryName);\r\n\r\n        }\r\n\r\n\r\n\r\n        // check for the size of the players list in the file that was saved\r\n//        String numOfPlayersString = br.readLine();\r\n//        int numOfPlayers = Integer.parseInt(numOfPlayersString);\r\n//        // loop that gets all the players and adds them to the tournament\r\n//        //System.out.println(br.readLine());\r\n//        for (int i = 0; i < numOfPlayers; i++) {\r\n//            String name, age,height,weight;\r\n//\r\n//            String player = br.readLine();\r\n//            player = player.replace(\"Player Name: \",\"\");\r\n//            player = player.replace(\" Age: \",\"\");\r\n//            player = player.replace(\" Height: \",\"\");\r\n//            player = player.replace(\"Weight: \",\"\");\r\n//            player.replace(\" \",\"\");\r\n//            System.out.println(player);\r\n//\r\n//\r\n//        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    public void saveToFile(String fileName) throws IOException  {\r\n        PrintWriter pw = new PrintWriter(new FileOutputStream(fileName));\r\n        String tournament = getName() +\"    \"+getStartDate() +\"    \"+getEndDate()+\"    \";\r\n        pw.println(tournament);\r\n\r\n        String numOfCountries = Integer.toString(countryList.size());\r\n        pw.println(numOfCountries);\r\n        if (countryList.size() > 0) {\r\n            for (Country country: countryList) {\r\n                pw.println(country.toString());\r\n            }\r\n        }\r\n        pw.println(teamList.size());\r\n        if (teamList.size() > 0) {\r\n            for (Team team: teamList) {\r\n                pw.println(team.toString());\r\n            }\r\n        }\r\n        pw.println(playerList.size());\r\n        if (playerList.size() > 0) {\r\n            for (Player player: playerList) {\r\n                pw.println(player.toString());\r\n            }\r\n        }\r\n        pw.println(matchList.size());\r\n        if (matchList.size() > 0) {\r\n            for (Match match: matchList) {\r\n                pw.println(match.toString());\r\n            }\r\n        }\r\n        pw.println(refereeList.size());\r\n        if (refereeList.size() > 0) {\r\n            for (Referee referee: refereeList) {\r\n                pw.println(referee.toString());\r\n            }\r\n        }\r\n        pw.close();\r\n\r\n    }\r\n\r\n    public void addCountry(String countryName) throws IllegalArgumentException {\r\n        Country country = null;\r\n        if (countryList.isEmpty()) {\r\n            Country country1 = new Country(countryName);\r\n            country = country1;\r\n            countryList.add(country);\r\n        }\r\n        else {\r\n            for (int i =0; i < countryList.size(); i++) {\r\n                if (countryList.get(i).getCountryName().equals(countryName)) {\r\n                    throw new IllegalArgumentException(\"The country already exists\");\r\n                }\r\n            }\r\n            Country country1 = new Country(countryName);\r\n            country = country1;\r\n            countryList.add(country);\r\n        }\r\n    }\r\n    public void addTeam (String teamName,String countryName) throws IllegalArgumentException {\r\n        //TODO: maybe give the user the option to add the country if it doesnt already exist or dont\r\n        Country country = null;\r\n        Team team = null;\r\n        if (teamList.isEmpty()) {\r\n            for (int i =0; i <  countryList.size(); i++) {\r\n                if (countryList.get(i).getCountryName().equals(countryName)) {\r\n                    country = countryList.get(i);\r\n                    Team team1 = new Team(teamName,countryList.get(i));\r\n                    team1.setName(teamName);\r\n                    team1.setCountry(countryName);\r\n                    team = team1;\r\n                    teamList.add(team1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (int i = 0; i < teamList.size(); i++) {\r\n                if (teamList.get(i).getName().equals(teamName)) {\r\n                    throw new IllegalArgumentException(\"A team with that name already exists\");\r\n                }\r\n            }\r\n                for (int j = 0; j < countryList.size(); j++) {\r\n                    if (countryList.get(j).getCountryName().equals(countryName)) {\r\n                        country = countryList.get(j);\r\n                        Team team1 = new Team(teamName,country);\r\n                        team1.setName(teamName);\r\n                        team1.setCountry(countryName);\r\n                        team = team1;\r\n                        teamList.add(team1);\r\n                        team = team1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        if (country == null) {throw new IllegalArgumentException(\"A country with that name was not found\");}\r\n        }\r\n\r\n\r\n    public void addPlayer(String teamName, String playerName, int age, double height, double weight) throws IllegalArgumentException {\r\n        Team team = null;\r\n        Player player = null;\r\n        for (int i =0; i < teamList.size(); i++) {\r\n            if (teamList.get(i).getName().equals(teamName)) {\r\n                Team team1 = teamList.get(i);\r\n                team = team1;\r\n            }\r\n        }\r\n            if (team.getSquad().isEmpty()) {\r\n                team.addPlayer(playerName,age,height,weight);\r\n                Player player1 = new Player(playerName,age,height,weight);\r\n                playerList.add(player1);\r\n                player = player1;\r\n            }\r\n            else {\r\n                for (int j = 0; j < team.getSquad().size(); j++) {\r\n                    if (team.getSquad().get(j).getName().equals(playerName)) {\r\n                        throw new IllegalArgumentException(\"A player with that name already exists on the team\");\r\n                    }\r\n                }\r\n                team.addPlayer(playerName,age,height,weight);\r\n                Player pLayer1 = new Player(playerName,age,height,weight);\r\n                playerList.add(pLayer1);\r\n                player = pLayer1;\r\n            }\r\n\r\n        if (team == null) {throw new IllegalArgumentException(\"A team was not found with that name\");}\r\n    }\r\n\r\n\r\n    public void addMatch(LocalDate date, String teamAName, String teamBName) throws IllegalArgumentException {\r\n        //TODO: maybe give the option to select the correct team if it isn't listed or add a new one\r\n        Team teamA = null;\r\n        Team teamB = null;\r\n\r\n      //  Match match = null;\r\n        // loop to make sure the match does not already exist\r\n        for (int i =0; i < matchList.size(); i++) {\r\n            if (matchList.get(i).getDateTime().equals(date)) {\r\n                throw new IllegalArgumentException(\"A match with that date was already added\");\r\n            }\r\n        }\r\n        // loop to find the country from the teamName for teamA\r\n        for (Team value : teamList) {\r\n            if (value.getName().equals(teamAName)) {\r\n                Team team = value;\r\n                teamA = team;\r\n            }\r\n        }\r\n        // loop to find the country from the teamName for teamB\r\n        for (Team value : teamList) {\r\n            if (value.getName().equals(teamBName)) {\r\n                Team team = value;\r\n                teamB = team;\r\n            }\r\n        }\r\n        if (teamA == null) {\r\n            throw new IllegalArgumentException(\"Team A was not found\");\r\n        }\r\n        if (teamB == null) {\r\n            throw new IllegalArgumentException(\"Team B was not found\");\r\n        }\r\n        Match match = new Match(date,teamA,teamB);\r\n        match.setTeamA(teamA);\r\n        match.setTeamB(teamB);\r\n        LineUp teamALineUp = new LineUp(teamA);\r\n        LineUp teamBLineUp = new LineUp(teamB);\r\n        match.setTeamALineUp(teamALineUp);\r\n        match.setTeamBLineUp(teamBLineUp);\r\n        matchList.add(match);\r\n    }\r\n    public void addReferee (String name, String countryName) throws IllegalArgumentException {\r\n        //TODO: this method\r\n        for (Country country : countryList) {\r\n            if (country.getCountryName().equals(countryName)) {\r\n                if (refereeList.isEmpty()) {\r\n                    Referee referee1 = new Referee(name, country);\r\n                    refereeList.add(referee1);\r\n                } else {\r\n                    Referee referee1 = new Referee(name, country);\r\n                    if (!refereeList.contains(referee1)) {\r\n                        refereeList.add(referee1);\r\n                    } else {\r\n                        throw new IllegalArgumentException(\"A referee with that name already exists\");\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n    public void addRefereeToMatch(LocalDate date, String refereeName) throws IllegalArgumentException {\r\n        // TODO: this method\r\n        Referee referee = null;\r\n        Match match = null;\r\n        // loop to find the match object if not found throw exception\r\n        for (int i = 0; i < matchList.size(); i++) {\r\n            if (matchList.get(i).getDateTime().equals(date)) {\r\n                match = matchList.get(i);\r\n            }\r\n        }\r\n        if (match == null) {throw new IllegalArgumentException(\"A match was not found with that date\");}\r\n        // loop to find the referee object and throw exception if they are not on the list or the country is the same as either team\r\n        for (int i =0; i < refereeList.size(); i++) {\r\n            if (refereeList.get(i).getName().equals(refereeName)) {\r\n                referee = refereeList.get(i);\r\n                for (int j = 0; j < matchList.size(); j++) {\r\n                    if (match.getTeamA().getCountry().getCountryName().equals(referee.getCountry().getCountryName()) ||\r\n                    match.getTeamB().getCountry().getCountryName().equals(referee.getCountry().getCountryName())) {\r\n                        throw new IllegalArgumentException(\"The referees country cannot be the same as either teams country\");\r\n                    }\r\n                }\r\n            }\r\n            if (referee == null) {throw new IllegalArgumentException(\"There was no referee found with that name\");}\r\n            match.addReferee(referee);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        //if (match.getReferees().size() != 4) {throw new IllegalArgumentException(\"There must be four referees added to the match\");}\r\n\r\n\r\n    }\r\n    public void addPlayerToMatch(LocalDate date, String teamName, String playerName) throws IllegalArgumentException {\r\n        Player player = null;\r\n        Team team = null;\r\n        Match match = null;\r\n        LineUp lineUp = null;\r\n        //get the match object that matches the specified time\r\n        for (int i =0; i < matchList.size();i++) {\r\n            if (matchList.get(i).getDateTime().equals(date)) {\r\n                match = matchList.get(i);\r\n            }\r\n        }\r\n        // if the match is not found throw an exception\r\n        if (match == null) {throw new IllegalArgumentException(\"A match with that date was not found\");}\r\n        //if the teamName matches teamA of the specified match date get the lineup object for that team\r\n        if (match.getTeamA().getName().equals(teamName)) {\r\n            lineUp = match.getTeamALineUp();\r\n\r\n            // search teamA to make sure the player object in that team exists\r\n            for (int i = 0; i < match.getTeamA().getSquad().size(); i++) {\r\n                //add the player to the lineup if they exist on the team\r\n                if (match.getTeamA().getSquad().get(i).getName().equals(playerName)) {\r\n                    player = match.getTeamA().getSquad().get(i);\r\n                    // if the list on lineup is empty then add them to lineup\r\n                    if (match.getTeamALineUp().getPlayers().isEmpty()) {\r\n                        match.getTeamALineUp().addPlayer(player);\r\n                    } else {\r\n                        for (int j = 0; j < match.getTeamALineUp().getPlayers().size(); j++) {\r\n                            // if the player already exists on the lineup throw exception\r\n                            if (match.getTeamALineUp().getPlayers().get(j).getName().equals(playerName)) {\r\n                                throw new IllegalArgumentException(\"The player already exists on the lineup\");\r\n                            }\r\n                        }\r\n                        match.getTeamALineUp().addPlayer(player);\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        if (match.getTeamB().getName().equals(teamName)) {\r\n\r\n            //do the same for teamB\r\n            for (int i = 0; i < match.getTeamB().getSquad().size(); i++) {\r\n                if (match.getTeamB().getSquad().get(i).getName().equals(playerName)) {\r\n                    player = match.getTeamB().getSquad().get(i);\r\n                    if (match.getTeamBLineUp().getPlayers().isEmpty()) {\r\n                        match.getTeamBLineUp().addPlayer(player);\r\n                    }\r\n\r\n                } else {\r\n                    for (int j = 0; j < match.getTeamBLineUp().getPlayers().size(); j++) {\r\n                        // if the player already exists on the lineup throw exception\r\n                        if (match.getTeamBLineUp().getPlayers().get(j).getName().equals(playerName)) {\r\n                            throw new IllegalArgumentException(\"The player already exists on the lineup\");\r\n                        }\r\n                    }\r\n                    match.getTeamBLineUp().addPlayer(player);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (player == null) {throw new IllegalArgumentException(\"A player with that name was not found on either team\");}\r\n\r\n    }\r\n    public void setMatchScore(LocalDate date, int teamAScore, int teamBScore) throws IllegalArgumentException {\r\n        for (int i =0; i< matchList.size();i++) {\r\n            if (matchList.get(i).getDateTime().equals(date)) {\r\n                if (teamAScore <= 0 || teamBScore <= 0) {\r\n                    throw new IllegalArgumentException(\"The team score can not be less than 0\");\r\n                }\r\n                else matchList.get(i).setMatchScore(teamAScore,teamBScore);\r\n            }\r\n        }\r\n    }\r\n    public List<Match> getUpcomingMatches() {\r\n        return matchList;\r\n    }\r\n    public List<Referee> getRefereeList() {\r\n        return refereeList;\r\n    }\r\n\r\n    //TODO: test getMatchesOn\r\n    public List<Match> getMatchesOn(LocalDate dateTime) throws NoSuchElementException {\r\n        ArrayList<Match> arrayList = new ArrayList<>();\r\n        for (int i =0; i < matchList.size(); i++) {\r\n            if (matchList.get(i).getDateTime().equals(dateTime)) {\r\n                arrayList.add(matchList.get(i));\r\n            }\r\n        }\r\n        if (getMatchesOn(dateTime) == null) {throw new NoSuchElementException(\"There are no matches with that date\");}\r\n\r\n        return arrayList;\r\n    }\r\n    //TODO: test getMatchesFor\r\n    public ArrayList<Match> getMatchesFor(String teamName) throws NoSuchElementException {\r\n       ArrayList<Match> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < matchList.size(); i++) {\r\n\r\n            if (matchList.get(i).getTeamA().getName().equals(teamName)) {\r\n                arrayList.add(matchList.get(i));\r\n\r\n            }\r\n            if (matchList.get(i).getTeamB().getName().equals(teamName)) {\r\n                arrayList.add(matchList.get(i));\r\n            }\r\n        }\r\n        return arrayList;\r\n\r\n    }\r\n    public ArrayList<Team> getTeamList() {\r\n        return teamList;\r\n    }\r\n    //TODO: implement getMatchLineUps\r\n    public List<LineUp> getMatchLineUps(LocalDate dateTime) {\r\n        ArrayList<LineUp> arrayList = new ArrayList<>();\r\n        for (int i =0; i < matchList.size(); i++) {\r\n            if (matchList.get(i).getDateTime().equals(dateTime)) {\r\n                arrayList.add(matchList.get(i).getTeamALineUp());\r\n                arrayList.add(matchList.get(i).getTeamBLineUp());\r\n            }\r\n        }\r\n        return arrayList;\r\n    }\r\n    public ArrayList<Player> getPlayersInTournament() {\r\n        return playerList;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder output = new StringBuilder();\r\n        output.append(String.format(\"Tournament: %s | Start: %s | End: %s|\", getName(), getStartDate(), getEndDate()));\r\n        output.append(\"====Country List====|\");\r\n        for(Country a : countryList) {output.append(a).append(\"|\");}\r\n        output.append(\"====Team List====|\");\r\n        for(Team b : teamList) {output.append(b).append(\"|\");}\r\n        output.append(\"====Player List====|\");\r\n        for(Player c : playerList) {output.append(c).append(\"|\");}\r\n        output.append(\"====Referee List====|\");\r\n        for(Referee d : refereeList) {output.append(d).append(\"|\");}\r\n        output.append(\"====Match List====|\");\r\n        for(Match e : matchList) {output.append(e).append(\"|\");}\r\n        return output.toString();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/edu/ucdenver/tournament/Tournament.java b/src/edu/ucdenver/tournament/Tournament.java
--- a/src/edu/ucdenver/tournament/Tournament.java	(revision 44126d9c7203e8ddca4c3f019ff29ae9dc654ce9)
+++ b/src/edu/ucdenver/tournament/Tournament.java	(date 1668578421802)
@@ -4,18 +4,17 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.NoSuchElementException;
-import java.util.Objects;
+import java.util.Scanner;
 
 
 public class Tournament implements Serializable {
     private String name;
 
     private final ArrayList<Country> countryList;
-    private ArrayList<Player> playerList;
-    private ArrayList<Team> teamList;
-    private ArrayList<Match> matchList;
-    private ArrayList<String> teamListString;
-    private ArrayList<Referee> refereeList;
+    private final ArrayList<Player> playerList;
+    private final ArrayList<Team> teamList;
+    private final ArrayList<Match> matchList;
+    private final ArrayList<Referee> refereeList;
 
     private LocalDate startDate;
     private LocalDate endDate;
@@ -31,11 +30,6 @@
         this.teamList = new ArrayList<>();
         this.matchList = new ArrayList<>();
         this.refereeList = new ArrayList<>();
-
-
-        this.teamListString = new ArrayList<>(); //used for the addMatch function
-
-
     }
     public List<Country> getCountryList() {
        return countryList;
@@ -103,21 +97,71 @@
         for (int i = 0; i <numberOfTeams; i++) {
            String line = br.readLine();
            System.out.println(line);
-           String name, age,height,weight,teamName, countryName;;
-           line = line.replace("Country: ","");
+           String name = null, age = null,height= null,weight = null,teamName = null, countryName = null;
+            line = line.replace("Country: ","");
            System.out.println(line);
+
+
            teamName = line.substring(0,line.indexOf("|"));
            teamName = teamName.replace("|","");
            System.out.println(teamName);
            countryName = line.substring(line.indexOf("|"),line.indexOf("||"));
            countryName = countryName.replace("|","");
            System.out.println(countryName);
+            //tournament.addTeam(teamName,countryName); //TODO:uncomment this line
+
            System.out.println(line);
            players = (line.split("Player Name: "));
-           System.out.println(players[1]);
-           //tournament.addTeam(teamName,countryName); //TODO:uncomment this line
+          // System.out.println(players[0]);
+           //System.out.println(players[1]);
+           //System.out.println(players[2]);
+           int numOfPlayers = players.length;
+           if (numOfPlayers >0) {
+               for (int j = 1; j < numOfPlayers; j++) {
+                   String player = players[j];
+                   //Scanner sc = new Scanner(player).useDelimiter("| ");
+                   System.out.println(player);
+
+                   name = player.substring(0,player.indexOf("|"));
+                   System.out.println(name);
+                   System.out.println(player);
+                   age = player.substring(player.indexOf("|")+1,player.indexOf("H"));
+                   age = age.replace(" Age: ","");
+                   age = age.replace("|","");
+                   age = age.replace(" ","");
+                   System.out.println(age);
+                   height = player.substring(player.indexOf("Height: "),player.indexOf("W"));
+                   height = height.replace("Height: ","");
+                   height = height.replace("|","");
+                   height = height.replace(" ","");
+                   System.out.println(height);
+                   System.out.println(player);
+                   if (player.endsWith(" ")) {
+                       weight = player.substring(player.indexOf("Weight: "));
+                       System.out.println(weight);
+                       weight = weight.replace("Weight: ","");
+                       weight = weight.replace(", ","");
+                       System.out.println(weight);
+                   }
+                   if (player.substring(player.length()-1).equals("]")) {
+                       weight = player.substring(player.indexOf("Weight: "),player.indexOf("]"));
+                       weight = weight.replace("Weight: ","");
+                       System.out.println(weight);
+                   }
+                   int ageInt = Integer.parseInt(age);
+                   double heightDouble = Double.parseDouble(height);
+                   double weightDouble = Double.parseDouble(weight);
+                   //tournament.addPlayer(teamName,name,ageInt,heightDouble,weightDouble); // TODO: uncomment this line
+                   // System.out.println(age);
+               }
+               //System.out.println(players[1]);
+               //  System.out.println(players[2]);
+           }
+
+
            //System.out.println(countryName);
 
+
         }
 
 
@@ -164,12 +208,6 @@
                 pw.println(team.toString());
             }
         }
-        pw.println(playerList.size());
-        if (playerList.size() > 0) {
-            for (Player player: playerList) {
-                pw.println(player.toString());
-            }
-        }
         pw.println(matchList.size());
         if (matchList.size() > 0) {
             for (Match match: matchList) {
@@ -189,18 +227,16 @@
     public void addCountry(String countryName) throws IllegalArgumentException {
         Country country = null;
         if (countryList.isEmpty()) {
-            Country country1 = new Country(countryName);
-            country = country1;
+            country = new Country(countryName);
             countryList.add(country);
         }
         else {
-            for (int i =0; i < countryList.size(); i++) {
-                if (countryList.get(i).getCountryName().equals(countryName)) {
+            for (Country value : countryList) {
+                if (value.getCountryName().equals(countryName)) {
                     throw new IllegalArgumentException("The country already exists");
                 }
             }
-            Country country1 = new Country(countryName);
-            country = country1;
+            country = new Country(countryName);
             countryList.add(country);
         }
     }
@@ -209,10 +245,10 @@
         Country country = null;
         Team team = null;
         if (teamList.isEmpty()) {
-            for (int i =0; i <  countryList.size(); i++) {
-                if (countryList.get(i).getCountryName().equals(countryName)) {
-                    country = countryList.get(i);
-                    Team team1 = new Team(teamName,countryList.get(i));
+            for (Country value : countryList) {
+                if (value.getCountryName().equals(countryName)) {
+                    country = value;
+                    Team team1 = new Team(teamName, value);
                     team1.setName(teamName);
                     team1.setCountry(countryName);
                     team = team1;
@@ -222,23 +258,22 @@
             }
         }
         else {
-            for (int i = 0; i < teamList.size(); i++) {
-                if (teamList.get(i).getName().equals(teamName)) {
+            for (Team item : teamList) {
+                if (item.getName().equals(teamName)) {
                     throw new IllegalArgumentException("A team with that name already exists");
                 }
             }
-                for (int j = 0; j < countryList.size(); j++) {
-                    if (countryList.get(j).getCountryName().equals(countryName)) {
-                        country = countryList.get(j);
-                        Team team1 = new Team(teamName,country);
-                        team1.setName(teamName);
-                        team1.setCountry(countryName);
-                        team = team1;
-                        teamList.add(team1);
-                        team = team1;
-                        break;
-                    }
-                }
+            for (Country value : countryList) {
+                if (value.getCountryName().equals(countryName)) {
+                    country = value;
+                    Team team1 = new Team(teamName, country);
+                    team1.setName(teamName);
+                    team1.setCountry(countryName);
+                    team = team1;
+                    teamList.add(team1);
+                    break;
+                }
+            }
             }
         if (country == null) {throw new IllegalArgumentException("A country with that name was not found");}
         }
@@ -247,12 +282,12 @@
     public void addPlayer(String teamName, String playerName, int age, double height, double weight) throws IllegalArgumentException {
         Team team = null;
         Player player = null;
-        for (int i =0; i < teamList.size(); i++) {
-            if (teamList.get(i).getName().equals(teamName)) {
-                Team team1 = teamList.get(i);
-                team = team1;
+        for (Team value : teamList) {
+            if (value.getName().equals(teamName)) {
+                team = value;
             }
         }
+        if (team == null) {throw new IllegalArgumentException("A team was not found with that name");}
             if (team.getSquad().isEmpty()) {
                 team.addPlayer(playerName,age,height,weight);
                 Player player1 = new Player(playerName,age,height,weight);
@@ -271,7 +306,7 @@
                 player = pLayer1;
             }
 
-        if (team == null) {throw new IllegalArgumentException("A team was not found with that name");}
+
     }
 
 
@@ -279,26 +314,22 @@
         //TODO: maybe give the option to select the correct team if it isn't listed or add a new one
         Team teamA = null;
         Team teamB = null;
-
-      //  Match match = null;
         // loop to make sure the match does not already exist
-        for (int i =0; i < matchList.size(); i++) {
-            if (matchList.get(i).getDateTime().equals(date)) {
+        for (Match item : matchList) {
+            if (item.getDateTime().equals(date)) {
                 throw new IllegalArgumentException("A match with that date was already added");
             }
         }
         // loop to find the country from the teamName for teamA
         for (Team value : teamList) {
             if (value.getName().equals(teamAName)) {
-                Team team = value;
-                teamA = team;
+                teamA = value;
             }
         }
         // loop to find the country from the teamName for teamB
         for (Team value : teamList) {
             if (value.getName().equals(teamBName)) {
-                Team team = value;
-                teamB = team;
+                teamB = value;
             }
         }
         if (teamA == null) {
@@ -331,8 +362,6 @@
                         throw new IllegalArgumentException("A referee with that name already exists");
                     }
                 }
-
-
             }
         }
     }
